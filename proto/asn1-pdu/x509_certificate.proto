// Copyright 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

// This proto represents an X.509 Certificate found in RFC 5280.

syntax = "proto2";

import "asn1_pdu.proto";
import "asn1_universal_types.proto";

package x509_certificate;

// See RFC 5280, 4.1 & 4.1.1.
message X509Certificate {
  required TBSCertificate tbs_certificate = 1;
  required SignatureAlgorithm signature_algorithm = 2;
  required SignatureValue signature_value = 3;
}

// See RFC 5280, 4.1 & 4.1.2.
message TBSCertificate {
  optional asn1_pdu.PDU pdu = 1;
  required TBSCertificateSequence value = 2;
}

message TBSCertificateSequence {
  required Version version = 1;
  required SerialNumber serial_number = 2;
  required SignatureAlgorithm signature_algorithm = 3;
  required Name issuer = 4;
  required Validity validity = 5;
  required Name subject = 6;
  required SubjectPublicKeyInfo subject_public_key_info = 7;
  optional UniqueIdentifier issuer_unique_id = 8;
  optional UniqueIdentifier subject_unique_id = 9;
  optional Extensions extensions = 10;
}

// See RFC 5280, 4.1 & 4.1.2.1.
message Version {
  // If |pdu| is present, encode |Version| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required VersionNumber value = 2;
}

// X.509 Certificates define three versions (RFC 5280, 4.1 & 4.1.2.1).
enum VersionNumber {
  v1 = 0;
  v2 = 1;
  v3 = 2;
}

// See RFC 5280, 4.1 & 4.1.2.2.
message SerialNumber {
  // If |pdu| is present, encode |SerialNumber| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.Integer value = 2;
}

// RFC 5280 4.1, 4.1.2.4, 4.1.2.6: Subject and Issuer contain |Name|.
message Name {
  // If |pdu| is present, encode |Name| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_pdu.PDU value = 2;
  // TODO(dhalawi@gmail.com): switch the required
  // field to encompass a valid |Name| value.
}

// See RFC 5280, 4.1 & 4.1.2.5.
message Validity {
  optional asn1_pdu.PDU pdu = 1;
  required ValiditySequence value = 2;
}

message ValiditySequence {
  required NotBefore not_before = 2;
  required NotAfter not_after = 3;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotBefore {
  optional asn1_pdu.PDU pdu = 1;
  required TimeChoice value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotAfter {
  optional asn1_pdu.PDU pdu = 1;
  required TimeChoice value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message TimeChoice {
  optional asn1_universal_types.UTCTime utc_time = 1;
  required asn1_universal_types.GeneralizedTime generalized_time = 2;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKeyInfo {
  // If |pdu| is present, encode |SubjectPublicKeyInfo| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required SubjectPublicKeyInfoSequence value = 2;
}

message SubjectPublicKeyInfoSequence {
  required AlgorithmIdentifierSequence algorithm_identifier = 2;
  required SubjectPublicKey subject_public_key = 3;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKey {
  // If |pdu| is present, encode |SubjectPublicKey| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.BitString value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message UniqueIdentifier {
  // If |pdu| is present, encode |UniqueIdentifier| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.BitString value = 2;
}

message Extensions {
  // If |pdu| is present, encode |Extensions| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required ExtensionSequence value = 2;
}

message ExtensionSequence {
  // RFC 5280, 4.1: Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension.
  // This ensures that, when not using the raw PDU for Extensions, that there is
  // at least one Extension present.
  required Extension extension = 1;
  repeated Extension extensions = 2;
}

message Extension {
  // Use |extn_id| when present for arbitrary OID.
  // Otherwise, use the correct OID for the extension encoded.
  optional asn1_universal_types.ObjectIdentifier extn_id = 1;
  // X.509v3 and profiles of X.509, such as RFC 5280 may specify individual
  // extensions to always be critical or never be critical in order to conform
  // with the profile. However, the goal of this protobuf is primarily to
  // construct valid DER, including DER that may not conform to the profile. To
  // support this, the criticalness of an extension is shared, rather than taking
  // an approach like the extension identifier.
  required asn1_universal_types.Boolean critical = 2;
  // When |types| is empty use |raw_extension|.
  // This allows an extension to always be encoded.
  required RawExtension raw_extension = 3;
  oneof types {
    AuthorityKeyIdentifier authority_key_identifier = 4;
    SubjectKeyIdentifier subject_key_identifier = 5;
    KeyUsage key_usage = 6;
    BasicConstraints basic_constraints = 7;
    ExtendedKeyUsage extended_key_usage = 8;
  }
}

// See RFC 5280, 4.1 & 4.1.2.9.
message RawExtension {
  required asn1_universal_types.ObjectIdentifier extn_id = 1;
  // If present, use |pdu| as the value instead of |extn_value|.
  optional asn1_pdu.PDU pdu = 2;
  required asn1_universal_types.OctetString extn_value = 3;
}

// See RFC 5280, 4.2.1.1.
message AuthorityKeyIdentifier {
  optional asn1_universal_types.OctetString key_identifier = 1;
  optional asn1_pdu.PDU authority_cert_issuer = 2;
  optional asn1_pdu.PDU authority_cert_serial_number = 3;
}

// See RFC 5280, 4.2.1.2.
message SubjectKeyIdentifier {
  required asn1_universal_types.OctetString key_identifier = 1;
}

// See RFC 5280, 4.2.1.3.
message KeyUsage {
  // KeyUsage ::= BIT STRING. Use bool to represent each bit of KeyUsage.
  required bool digital_signature = 1;
  required bool non_repudation = 2;
  required bool key_encipherment = 3;
  required bool data_encipherment = 4;
  required bool key_agreement = 5;
  required bool key_cert_sign = 6;
  required bool crl_sign = 7;
  required bool encipher_only = 8;
  required bool decipher_only = 9;
}

// See RFC 5280, 4.2.1.9.
message BasicConstraints {
  required asn1_universal_types.Boolean ca = 1;
  optional asn1_universal_types.Integer path_len_constraint = 2;
}

// See RFC 5280, 4.2.1.12.
message ExtendedKeyUsage {
  // ExtendedKeyUsage is SEQUENCE SIZE (1..MAX) OF KeyPurposeId.
  // This ensures that there is at least one |key_purpose_id| is present.
  required asn1_universal_types.ObjectIdentifier key_purpose_id = 1;
  repeated asn1_universal_types.ObjectIdentifier key_purpose_ids = 2;
}

// See RFC 5280, 4.1 & 4.1.1.2.
message SignatureAlgorithm {
  // If |pdu| is present, encode |SignatureAlgorithm| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required AlgorithmIdentifierSequence value = 2;
}

// See RFC 5280, 4.1.1.2.
message AlgorithmIdentifierSequence {
  // TODO(dhalawi@google.com):
  // encode a correct |AlgorithmIdentifierSequence|.
  required asn1_pdu.PDU object_identifier = 1;
  required asn1_pdu.PDU parameters = 2;
}

// See RFC 5280, 4.1 & 4.1.1.3.
message SignatureValue {
  // If |pdu| is present, encode |SignatureValue| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.BitString value = 2;
}